APIVersion: 1
label: automation:condition:flow_reports_matching_rulesets
identities:
- automationcondition
data:
  automationconditions:
  - key: '@condition:flow_reports_matching_rulesets'
    name: When a certain number of flows reports are matching some rulesets
    propagate: true
    description: Continue if the number of flow reports equals or exceeds a certain limit for the specified ruleset policies.
    entitlements:
      reportsquery:
      - create
    function: |-
      function when(m, params) {
        if (!params.ruleset_ids) {
          throw 'Parameter "ruleset_ids" must be set';
        }
        if (!params.limit) {
          throw 'Parameter "limit" must be set';
        }
        if (!params.platform_url) {
          throw 'Parameter "platform_url" must be set';
        }

        var reportQuery = m.Create(
          'reportsqueries',
          {
            report: 'Flows',
          },
          null,
          {
            q: params.ruleset_ids.map(function(id) { return 'policyID == "' + id + '"'; }).join(' OR '),
            startRelative: '5m',
            recursive: 'true',
          }
        );

        // Below are used for Flow Details
        var policyID; // Affected ruleset
        var timeOfEvent; // timestamp
        var sourceIP;
        var sourceName; // sourceID
        var sourceNamespace; // policyNamespace
        var destinationIP;
        var destinationName; // destinationID
        var destinationNamespace; // namespace
        var destinationPort;
        var protocol;
        var flowCount;
        var hits;

        var groupedFlowReports = _.groupBy(reportQuery.flowReports, 'policyID');
        var condition = _.some(groupedFlowReports, function(flows, policy) {
          policyID = policy;
          timeOfEvent = groupedFlowReports[policy][0].timestamp;
          sourceIP = groupedFlowReports[policy][0].sourceIP;
          sourceName = groupedFlowReports[policy][0].sourceID;
          sourceNamespace = groupedFlowReports[policy][0].policyNamespace;
          destinationIP = groupedFlowReports[policy][0].destinationIP;
          destinationName = groupedFlowReports[policy][0].destinationID;
          destinationNamespace = groupedFlowReports[policy][0].namespace;
          destinationPort = groupedFlowReports[policy][0].destinationPort;
          protocol = groupedFlowReports[policy][0].protocol;
          hits = groupedFlowReports[policy][0].value;
          flowCount = flows.length;
          return flowCount >= params.limit;
        });

        var headings = ['Time Of Event', 'Source IP', 'Source Name', 'Source Namespace', 'Destination IP', 'Destination Name', 'Destination Namespace', 'Protocol', 'Destination Port', 'Hits'];
        var data = [[timeOfEvent, sourceIP, sourceName, sourceNamespace, destinationIP, destinationName, destinationNamespace, protocol, destinationPort, hits]];
        var table = [];
        var widths = {};
        headings.forEach(function(heading, index) {
          data.forEach(function(row) {
            widths[index] = Math.max(heading.length, (row[index] || '').length);
          });
        });
        
        var tableHeadings = headings.map(function(heading, index) {
          return heading + new Array(Math.max(widths[index] - heading.length + 1, 0)).join(' ');
        }).join(' | ');
        table.push(tableHeadings);

        var separator = headings.map(function(_, index) {
          return new Array(widths[index] + 1).join('-');
        }).join('+');
        table.push(separator);

        data.forEach(function(row) {
          var entry = row.map(function(entry, index) {
            return entry + new Array(Math.max(widths[index] - entry.length + 1, 0)).join(' ');
          }).join(' | ');
          table.push(entry);
        });

        return {
          continue: condition,
          payload: {
            content: "\n\nAffected Ruleset: " + policyID +
              "\nNamespace: " + sourceNamespace +
              "\n\nFlow details" +
              "\n" + table.join('\n') +
              "\n\nFor more info: " + params.platform_url + "/flowlogs?namespace=" + sourceNamespace + "&timeRange=86400000&filter=policyID+==+" + policyID
          }
        }
      }
    steps:
    - name: Parameters
      parameters:
      - name: Ruleset Policy IDs
        key: ruleset_ids
        description: The identifiers of the ruleset policies to track.
        type: StringSlice
      - name: Limit
        key: limit
        description: The triggering limit in which the condition is met.
        type: Integer
      - name: Platform URL
        key: platform_url
        description: The base URL to the platform's UI.
        type: String
