APIVersion: 1
label: recipe:quickstart:linux
data:
  recipes:
  - name: Secure a Linux Service
    label: recipe:quickstart:linux
    options:
      appCrendentialFormat: JSON
    propagate: true
    metadata:
    - "@aporeto:audience=public"
    associatedTags:
    - "aporeto:placement=topnav"
    targetIdentities:
    - namespace
    - appcredential
    - hostservice
    - hostservicemappingpolicy
    - externalnetwork
    - networkaccesspolicy
    description: Secure a host with Aporeto Enforcerd.
    longDescription: |-

      ### Start onboarding your Linux VM

      Follow these steps to onboard an enforcerd in your Linux VM.

      #### Prerequisites

      Before diving into the steps, make sure you have:

      - A compatible distribution
      - Aporeto Repository added to your package manager

      Check out our complete documentation page about [Enforcerd installation on Linux](.Aporeto.junonUrl/docs/main/installation/install-on-linux/)

      #### Summary
      1. Define a [Namespace](.Aporeto.junonUrl/docs/main/concepts/namespaces/) that will store all your data in a single folder-like structure.

      _(See all Namespaces from the left menu under "Namespace Settings")_

      2. Define the protection of your VM and we will defined some **Host Services** for you.

      _(See all Host Services from the left menu under "Node")_

      3. Create an **AppCredential** that will be given to the enforcerd to register and discuss with the control plane.

      _(See all AppCredentials from the left menu under "Namespace Settings")_

      4. Install and start your enforcerd

      Click **Next** to go to the next step.

    template: |-
      {{`
      APIVersion: 1
      data:
        namespaces:
        - name: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
          description: {{ .Values.namespace_description }}
        appcredentials:
        - name: "enforcerd"
          namespace: "{{ .Values.namespace_name }}"
          description: "credentials used by the enforcerd running in kubernetes."
          roles:
          - "@auth:role=enforcer"
        - name: "aporeto-operator"
          description: "credentials used by the aporeto-operator."
          roles:
          - "@auth:role=aporeto-operator"
        {{- if .Values.protection_entire_host }}

        hostservices:
        - name: "protection"
          namespace: "{{ .Values.namespace_name }}"
          description: "This host service protects the entire host."
          hostModeEnabled: true
          associatedTags:
          - "hs:name=protection"
        - name: "services"
          namespace: "{{ .Values.namespace_name }}"
          description: "This host service defines services"
          hostModeEnabled: false
          associatedTags:
          - "hs:name=services"
          services:
          {{- if .Values.protection_incoming_ssh }}
          - "tcp/22"
          {{- end}}
          {{- if .Values.protection_incoming_http }}
          - "tcp/80"
          {{- end}}
          {{- if .Values.protection_incoming_https }}
          - "tcp/443"
          {{- end}}

        hostservicemappingpolicies:
        - name: "All enforcers implement protection and services"
          namespace: "{{ .Values.namespace_name }}"
          description: "This policy has been created from the linux workflow"
          subject:
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "$identity=enforcer"
          object:
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "hs:name=protection"
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "hs:name=services"

        externalnetworks:
        {{- if .Values.protection_outgoing_dns }}
        - name: "DNS (udp/53)"
          namespace: "{{ .Values.namespace_name }}"
          description: "This external network has been created from the linux workflow"
          entries:
          - "0.0.0.0/0"
          ports:
          - "53"
          protocols:
          - "udp"
          associatedTags:
          - "extnet:name=dns"
        {{- end}}
        {{- if .Values.protection_outgoing_tcp }}
        - name: "Internet (any TCP)"
          namespace: "{{ .Values.namespace_name }}"
          description: "This external network has been created from the linux workflow"
          entries:
          - "0.0.0.0/0"
          ports:
          - "1:65535"
          protocols:
          - "tcp"
          associatedTags:
          - "extnet:name=internet"
        {{- end}}

        networkaccesspolicies:
        {{- if .Values.protection_outgoing_dns }}
        - name: "Allow traffic to DNS"
          namespace: "{{ .Values.namespace_name }}"
          description: "This policy has been created from the linux workflow"
          action: "Allow"
          logsEnabled: true
          subject:
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "$identity=processingunit"
          object:
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "extnet:name=dns"
        {{- end}}
        {{- if .Values.protection_outgoing_tcp }}
        - name: "Allow traffic to Internet"
          namespace: "{{ .Values.namespace_name }}"
          description: "This policy has been created from the linux workflow"
          action: "Allow"
          logsEnabled: true
          subject:
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "$identity=processingunit"
          object:
          - - "$namespace={{ .Aporeto.Namespace }}/{{ .Values.namespace_name }}"
            - "extnet:name=internet"
        {{- end}}

        {{- end }}
      `}}
    steps:
    - name: Namespace
      description: |-
        Let's create a namespace first. It will contain all the data that will be created during these steps.

        Also, having a separate namespace allows you to give permissions to other users to access that specific namespace.

        Later, you will be able to delete this namespace which automatically delete all the related resources.

        ##### Read more about:

        - [Namespaces](.Aporeto.junonUrl/docs/main/concepts/namespaces/)
        - [Authentications and authorizations](.Aporeto.junonUrl/docs/main/concepts/authentication-and-authorization/)

        Clicking **Next** once you have defined your Aporeto namespace.

      parameters:
      - key: namespace_name
        name: Namespace
        description: Define your namespace name.
        type: String
        defaultValue: quickstart
      - key: namespace_description
        name: Description
        description: Description of the namespace.
        type: String
        optional: true
        defaultValue: Namespace for quick start project

    - name: Protection
      description: |-

        ### Protect your Linux host

        Define how your VM should be protected. The default suggestion, will allow:

        * Enforcer to protect the entire host
        * Only SSH access is allowed to the VM
        * All outgoing traffic is allowed

        This step will define some host services based on your below choices.
        Click **Next** to continue.

      parameters:
      - key: protection_entire_host
        description: Protect the entire host.
        type: Boolean
        defaultValue: true
      - key: protection_incoming_ssh
        description: Allow incoming SSH traffic (tcp/22)
        type: Boolean
        defaultValue: true
      - key: protection_incoming_http
        description: Allow incoming HTTP traffic (tcp/80)
        type: Boolean
        defaultValue: false
      - key: protection_incoming_https
        description: Allow incoming HTTPS traffic (tcp/443)
        type: Boolean
        defaultValue: false
      - key: protection_outgoing_tcp
        description: Allow outgoing traffic on TCP (tcp/1:65535)
        type: Boolean
        defaultValue: true
      - key: protection_outgoing_dns
        description: Allow outgoing traffic for DNS resolution (udp/53)
        type: Boolean
        defaultValue: true

    - name: Credentials
      description: |-

        ### Define an app credential

        In this step, we will create an AppCredential for the enforcerd.

        #### What is an App Credential ?
        An App Credential is a yaml file that contains all the necessary information to connect to the platform.
        It has a specific role in the namespace it has been created.

        Read more about [App Credentials](.Aporeto.junonUrl/docs/main/references/appcredentials/)

      parameters:
      - key: credentials_name
        name: Name
        description: Define your credential name.
        type: String
        defaultValue: enforcerd
      - key: credentials_description
        name: Description
        description: Description of the appcredentials.
        type: String
        optional: true
        defaultValue: AppCredential for the enforcerd on linux.

    successfullMessage: |-
        ### Start your enforcerd in Linux

        Use the AppCredential to start your enforcer.
        (See installation instructions from our [official documentation](.Aporeto.junonUrl/docs/main/installation/install-on-linux/))
