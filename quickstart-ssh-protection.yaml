APIVersion: 1
label: recipe:quickstart-ssh-protection
data:
  recipes:
  - name: Quickstart your SSH protection
    label: recipe:quickstart-ssh-protection
    options:
      appCrendentialFormat: JSON
    propagate: true
    metadata:
    - "@aporeto:audience=public"
    - "@aporeto:audience=enterprise"
    associatedTags:
    - "aporeto:placement=topnav"
    targetIdentities:
    - oidcprovider
    - apiauthorizationpolicy
    - sshauthorizationpolicy
    - networkaccesspolicy
    - auditprofilemappingpolicy
    - externalnetwork
    description: Protect the SSH access to your resources.
    longDescription: |-

      ### Context

      Aporeto allows you to manage, control, and monitor secure shell (SSH) access to remote hosts that are protected with an Enforcer.

      ### Steps

      Follow these steps to complete this guide:

      1. Define the **Authentication Source** that will allow your users to authenticate to Aporeto.
      2. Allow an authenticated user to request an SSH certificate via an **Authorization**.
      3. Allow an authenticated user to obtain an SSH Certificate via an **SSH Authorization**.

      _Note: Each step can be done or modified individually by accessing the corresponding page in the left menu._

      ### Additional information

      In this guide, we will automatically do the following for you:

      * Accept any UDP/TCP/ICMP traffic from/to the SSH session.
      * Log user activity made during the SSH session.

    template: |-
      {{`
      APIVersion: 1
      data:
        {{- if (eq .Values.realm "oidc") }}
        {{- if (not .Values.oidc_already_exists) }}
        oidcproviders:
        - name: {{ required ".Values.oidc_name is required" .Values.oidc_name }}
          description: "Created with the quickstart"
          endpoint: {{ required ".Values.oidc_endpoint is required" .Values.oidc_endpoint }}
          clientID: {{ required ".Values.oidc_clientID is required" .Values.oidc_clientID }}
          clientSecret: {{ required ".Values.oidc_clientSecret is required" .Values.oidc_clientSecret }}
          scopes:
          {{- range $i, $scope := .Values.oidc_scopes }}
          - "{{ $scope }}"
          {{- end }}
          subjects:
          {{- range $i, $subject := .Values.oidc_subjects }}
          - "{{ $subject }}"
          {{- end }}
          default: true
        {{- end }}
        apiauthorizationpolicies:
        - name: "Allow OIDC users to request an SSH Certificate"
          description: "Created with the quickstart"
          propagate: true
          subject:
          - - "@auth:realm=oidc"
            - "@auth:organization={{ required ".Aporeto.Namespace is required" .Aporeto.Namespace }}"
          authorizedNamespace: "{{ .Aporeto.Namespace }}"
          authorizedIdentities:
          - "@auth:role=sshidentity.requester"
        {{- else }}
        apiauthorizationpolicies:
        - name: "Allow Google users to request an SSH Certificate"
          description: "Created with the quickstart"
          propagate: true
          subject:
          {{- range $i, $email := .Values.emails }}
          - - "@auth:realm=google"
            - "@auth:email={{ $email }}"
          {{- end }}
          authorizedNamespace: "{{ .Aporeto.Namespace }}"
          authorizedIdentities:
          - "@auth:role=sshidentity.requester"
        {{- end }}

        sshauthorizationpolicies:
        - name: {{ required ".Values.sshauthorizationpolicy_name is required" .Values.sshauthorizationpolicy_name }}
          description: "Created with the quickstart"
          propagate: true
          subject:
          {{- if .Values.sshauthorizationpolicy_claims }}
          {{- range $i, $claim := .Values.sshauthorizationpolicy_claims }}
          - - "@auth:realm={{ $.Values.realm }}"
            - "{{ $claim }}"
          {{- end }}
          {{- else }}

          {{- if (eq .Values.realm "google" ) }}
          {{- range $i, $email := .Values.emails }}
          - - "@auth:realm=google"
            - "@auth:email={{ $email }}"
          {{- end }}
          {{- else }}
          - - "@auth:realm=oidc"
            - "@auth:organization={{ .Aporeto.Namespace }}"
          {{- end}}

          {{- end }}
          object:
          - - "$identity=enforcer"
            - "$namespace={{ .Aporeto.Namespace }}"
          extensions:
          - "permit-pty"
          principals:
          {{- range $i, $principal := .Values.sshauthorizationpolicy_principals }}
          - "{{ $principal }}"
          {{- end }}

        externalnetworks:
        - name: "Internet"
          description: "Represents any traffic"
          associatedTags:
          - "ext:net=internet"
          entries:
          - "0.0.0.0/0"
          protocols:
          - udp
          - tcp
          - icmp
          ports:
          - "1:65535"

        networkaccesspolicies:
        - name: "Allow all UDP/TCP/ICMP traffic from/to an SSH Session"
          description: "This allows access from/to your session"
          action: "Allow"
          logsEnabled: true
          propagate: true
          subject:
          - - "$identity=processingunit"
            - "$type=SSHSession"
          - - "ext:net=internet"
          object:
          - - "$identity=processingunit"
            - "$type=SSHSession"
          - - "ext:net=internet"

        auditprofilemappingpolicies:
        - name: "Enforcers collect execve commands"
          description: "All enforcer are implementing the audit profile execve"
          propagate: true
          subject:
          - - "$identity=enforcer"
          object:
          - - "auditprofile:rule=execve"


      `}}
    steps:
    - name: Authentication Source
      description: |-
        Aporeto provides multiple authentication sources.

        In this step, you will define how your users should authenticate to your namespace.

        _Note: Read more about [configuring OIDC for Aporeto](.Aporeto.junonUrl/saas/setup/idp/)_

      parameters:
      - key: realm
        name: Identity Provider
        description: Which identity provider would you like to use ?
        type: Enum
        defaultValue: google
        allowedChoices:
          google: Google
          oidc: OIDC

      - key: emails
        name: Emails
        description: List of emails to grant access to your namespace.
        type: StringSlice
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "google"

      - key: oidc_already_exists
        name: Use an existing OIDC Provider
        description: I have already defined an OIDC provider
        type: Boolean
        defaultValue: false
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"

      - key: oidc_name
        name: Name
        description: Used by your users to authenticate to that specific OIDC provider.
        type: String
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"
          - key: oidc_already_exists
            operator: Equal
            value: false
      - key: oidc_endpoint
        name: Endpoint
        description: Identity provider's URL.
        type: String
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"
          - key: oidc_already_exists
            operator: Equal
            value: false
      - key: oidc_clientID
        name: Client ID
        description: Client ID provided by your OIDC provider.
        type: String
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"
          - key: oidc_already_exists
            operator: Equal
            value: false
      - key: oidc_clientSecret
        name: Client Secret
        description: Client Secret provided by your OIDC provider.
        type: String
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"
          - key: oidc_already_exists
            operator: Equal
            value: false
      - key: oidc_scopes
        name: Scopes
        description: List of scopes to retrieve from the OIDC provider.
        type: StringSlice
        defaultValue:
        - profile
        - email
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"
          - key: oidc_already_exists
            operator: Equal
            value: false
      - key: oidc_subjects
        name: Subjects
        description: Indicate which OIDC claims should define the subject claim.
        type: StringSlice
        defaultValue:
        - email
        visibilityCondition:
        - - key: realm
            operator: Equal
            value: "oidc"
          - key: oidc_already_exists
            operator: Equal
            value: false

    - name: Authorization
      description: |-

        ### Authorize your users to access your namespace and request an SSH Certificate.

        According to the provider defined, this step will define a default **Authorization** that allows your users to request an SSH Certificate.

        You will retrieve this authorization in the left menu under *Namespace Settings* > *Authorizations*.

        Feel free to modify this Authorization if you feel it is too permissive.

        **Important:** Requesting an SSH Certificate does not mean the certificate will be delivered. An **SSH Authorization** will be defined next step.

    - name: SSH Authorization
      description: |-

        ### Define who can obtain an SSH Certificate

        Select the user who will be allowed to get an SSH Certificate.

      parameters:
      - key: sshauthorizationpolicy_name
        name: Name
        description: Define the name of this policy.
        type: String
        defaultValue: Allow users to get an SSH Certificate
      - key: sshauthorizationpolicy_claims
        name: Claims
        description: Claims to present to get an SSH Certificate (Type @ for suggestions)
        type: StringSlice
        allowedValues:
        - "@auth:email="
        - "@auth:account="
        - "@auth:organization="
      - key: sshauthorizationpolicy_principals
        name: Principals
        description: Principals to add to the SSH Certificate. In any case, the certificate will always contain the Aporeto Token subject as principal.
        optional: true
        type: StringSlice

    successfullMessage: |-
        ### Configure your hosts to require an Aporeto SSH Certificate

        You've succesfully created all the rules!

        Before your users can access your resources, you will need to:

        * Install the enforcer on your hosts.
        * Configure them to require an Aporeto SSH Certificate.

        [Follow the steps described in our detailed documentation](.Aporeto.junonUrl/docs/main/guides/ssh/ssh-restrict/).

        ### Tell your users they can now request for an SSH Certificate

        Once the enforcer is installed, here are the steps to get an SSH Certificate:

        1. Authenticate and store the token in the APOCTL_TOKEN environment variable:

        ```
        eval `apoctl auth oidc --namespace .Aporeto.Namespace -e`
        OR
        eval `apoctl auth google -e`
        ```

        2. Obtain an SSH Certificate using the temporary token:

        ```
        apoctl ssh cert --namespace .Aporeto.Namespace
        ```

        The above command will generate an Aporeto SSH Certificate that can be used to access the protected hosts.

        [Share these instructions with your users](.Aporeto.junonUrl/docs/main/guides/ssh/ssh-access/).
