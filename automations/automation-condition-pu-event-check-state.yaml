APIVersion: 1
label: automation:condition:pu_event_check_state
identities:
- automationcondition
data:
  automationconditions:
  - key: '@condition:pu_event_check_state'
    name: When a Host PU event triggers
    propagate: true
    description: Continue if the Host PU is new and running or existing and stopped.
    function: |-
      function when(m, params) {
        if (!params.eventPayload) {
          throw 'This condition must be configured with a trigger of type "Event"';
        }
        if (!params.pu_state) {
          throw 'Parameter "pu_state" must be set';
        }
        if (!params.platform_url) {
          throw 'Parameter "platform_url" must be set';
        }

        var eventType = params.eventPayload.type;
        var id = params.eventPayload.entity.ID;
        var namespace = params.eventPayload.entity.namespace;
        var priorState = params.eventPayload.entity.previousOperationalStatus;
        var currentState = params.eventPayload.entity.operationalStatus;
        var puType = params.eventPayload.entity.type;

        if (puType !== "Host") {
          return { continue: false };
        }

        var shouldContinue = false

        switch (eventType) {
          case "create":
            if (params.pu_state === "Stopped" || currentState !== "Running") {
              return { continue: false };
            }

            shouldContinue = true
            break;
          case "update":
            if (currentState !== "Running" && currentState !== "Stopped" && currentState !== "Terminated") {
              return { continue: false };
            }

            // If Running or Both, we want to see if this is a new PU that started running
            if (params.pu_state !== "Stopped" && priorState === "Initialized" && currentState === "Running") {
              shouldContinue = true
              break;
            }

            // if Stopped or Both, we want to see if the running PU has been stopped/terminated
            if (params.pu_state !== "Running" && priorState === "Running" && (currentState === "Stopped" || currentState === "Terminated")) {
              shouldContinue = true
            }
            break;
          case "delete":
            if (priorState !== "Running") {
              return { continue: false };
            }

            // if Stopped or Both, this is an event we want to report
            if (params.pu_state !== "Running") {
              shouldContinue = true
            }
            break;
        }

        return {
          continue: shouldContinue,
          payload: {
            content: "\n\nAffected Host Processing Unit: " + id +
              "\nNamespace: " + namespace +
              "\n\nState: " + currentState
          }
        }
      }
    steps:
    - name: Parameters
      parameters:
      - name: Host Processing Unit State
        key: pu_state
        description: The state(s) to track for Host Processing Units.
        type: Enum
        allowedChoices:
          Running: A new Host PU is running
          Stopped: An existing Host PU is stopped
          Both: A new Host PU is running or existing Host PU is stopped
      - name: Platform URL
        key: platform_url
        description: The base URL to the platform's UI.
        type: String
