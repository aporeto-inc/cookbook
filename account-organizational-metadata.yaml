APIVersion: 1
label: "recipe:account-organizational-metadata"
data:
  automations:
    - name: add-namespace-organizational-metadata
      description: "Triggered after a namespace is created to install a recipe"
      signature: "MEYCIQDgvN76jFQhl+KyWQYuuixklnSCcvzRDiXRlWCsrHIHXwIhAO8VhSpaapJCl980/B84BTkmf0WVkHShEmBeU4y1Hiip"
      trigger: Event
      protected: true
      mode: Post
      events:
        namespace:
          - create
      entitlements:
        import:
          - create
        recipe:
          - create
          - retrieve-many
        rendertemplate:
          - create
        importreference:
          - create
        hookpolicy:
          - create
          - retrieve-many
        automation:
          - create
          - retrieve-many
        networkaccesspolicy:
          - create
          - retrieve-many
        externalnetwork:
          - create
          - retrieve-many

      condition: |-
        /* When a namespace is created at the root level */
        function when(api, params) {
            return { continue: params.eventPayload.entity.namespace === "/", payload: { namespace: params.eventPayload.entity } };
        }
      actions:
        - |
          /* Create 2 recipes and auto deploy namespace organization metadata */
          function then(api, params, payload) {
            var namespace = payload.namespace.name;

            var recipeNamespaceOrganizationlMetadata = {
              "name": "Namespace organization metadata",
              "description": "Controls organizational metadata of your namespaces",
              "label": "recipe:namespace-organizational-metadata",
              "propagate": false,
              "deploymentMode": "Unique",
              "metadata": [
                  "@aporeto:author=aporeto"
              ],
              "associatedTags": null,
              "targetIdentities": [
                  "automation",
                  "hookpolicy"
              ],
              "longDescription": "\nA metadata is a \"key=value\" pair, where value is the name of your namespace.\n\nThis workflow allows to define the keys of your organizational metadata that are used to represent\nyour namespace hiearchy.\n\nBy default, we suggest to consider the following keys:\n\n1. workspace\n2. platform\n3. app\n\nThese metadata will be propagated to your processing units, defenders, external networks and can then be used\nin your policies rules.",
              "template": "{{`\nAPIVersion: 1\nlabel: \"recipe:namespace-organizational-metadata\"\ndata:\n  hookpolicies:\n    - name: \"namespace-organizational-metadata-hook\"\n      description: \"Triggers automation called namespace-organizational-metadata\"\n      endpointType: Automation\n      protected: true\n      propagate: true\n      subject:\n        - - \"$identity=namespace\"\n      selectors:\n        - - \"$identity=automation\"\n          - \"$name=namespace-organizational-metadata\"\n  automations:\n    - name: namespace-organizational-metadata\n      description: \"Triggered by the hook called namespace-organizational-metadata-hook\"\n      signature: \"MEUCIQCC+VY2MlOopMOACN0oErTH7/3bsZ/WBStPaxbu2ANSpgIgQWDqVsh17dsMssc87o1tP2WBAlLLVqfdhD53CqLh2/g=\"\n      trigger: Webhook\n      propagate: true\n      protected: true\n      parameters:\n        keys:\n          {{- range $index, $key := .Values.keys }}\n          - {{ $key | quote }}\n          {{- end }}\n        app_level: {{ .Values.app_level | quote }}\n      actions:\n        - |\n          function organizationalMetadataForNamespace(namespace, keys) {\n\n            parents = namespace.namespace.split(\"/\");\n            parents.shift()\n\n            if (!parents || parents.length == 0) {\n              return [];\n            }\n\n            // Root namespace case not handled in this workflow.\n            if (parents[0] === \"\") {\n              return [];\n            }\n\n            idx = parents.length - 1;\n            if (idx >= keys.length) {\n              return [];\n            }\n\n            k = keys[idx];\n            if (k === \"\") {\n              return [];\n            }\n\n            return [\"@org:\" + k + \"=\" + namespace.name];\n          }\n          /**\n          * This function will be executed when the automation condition is met:\n          * @param {object} api - api manipulator that allows CRUD operations.\n          * @param {object} params - the parameters configured in the automation.\n          * @param {object} payload - Payload returned by the condition.\n          */\n          function then(api, params) {\n\n              var triggerPayload = JSON.parse(params.triggerPayload);\n              var namespace = triggerPayload.input;\n\n              if (triggerPayload.operation !== \"create\" || !namespace.name) {\n                triggerPayload.output = triggerPayload.input;\n                return {\n                  \"statusCode\": 200,\n                  \"body\": JSON.stringify(triggerPayload),\n                }\n              }\n\n              namespace.organizationalMetadata = organizationalMetadataForNamespace(namespace, params.keys);\n\n              // populates the output field of the remote processor model with our modifications\n              triggerPayload.output = namespace;\n\n              return {\n                  \"statusCode\": 200,\n                  \"body\": JSON.stringify(triggerPayload),\n              }\n\n          }\n    - name: auto-deploy-discovery-mode\n      description: \"Automatic deployment of discovery mode in app namespaces\"\n      signature: \"MEUCIHS4SDy7tszF6cF5cxq1db3Se7p4v7/BGiLr+3uDvpviAiEAk7N9O37JliL8QKe0SY4+6tNok+sPkExmITSXgC0RDo4=\"\n      trigger: Event\n      events:\n        namespace:\n          - create\n      entitlements:\n        recipe:\n          - retrieve-many\n        rendertemplate:\n          - create\n        importreference:\n          - create\n        networkaccesspolicy:\n          - create\n          - retrieve-many\n        externalnetwork:\n          - create\n          - retrieve-many\n      propagate: true\n      protected: true\n      parameters:\n        keys:\n          {{- range $index, $key := .Values.keys }}\n          - {{ $key | quote }}\n          {{- end }}\n        app_level: {{ .Values.app_level | quote }}\n      condition: |-\n        /* When creating a namespace that contains app */\n        function when(api, params, payload) {\n          var namespace = params.eventPayload.entity.namespace;\n\n          appIndex = _.indexOf(params.keys, params.app_level)\n\n          console.error(appIndex, params.app_level);\n\n          if (appIndex < 1) {\n            return { continue: false };\n          }\n\n          parents = namespace.split(\"/\");\n          // remove root and account namespaces.\n          parents.shift();\n          parents.shift();\n\n          return { continue: parents.length === appIndex, payload: { targetNamespace: params.eventPayload.entity.name } };\n        }\n      actions:\n        - |\n          /* Deploy the discovery mode recipe */\n          function then(api, params, payload) {\n            return aporeto.deployRecipeWithLabelFilter(api, payload.targetNamespace, 'label == \"recipe:design-mode\"', {\"propagate\": true});\n          }\nidentities:\n  - hookpolicy\n  - automation\n`}}",
              "steps": [
                  {
                    "name": "Structure",
                    "description": "Provides the sorted list of key that describes best your namespace hierarchy.",
                    "parameters": [
                        {
                          "key": "keys",
                          "name": "Keys",
                          "description": "Sorted list of keys",
                          "type": "StringSlice",
                          "defaultValue": [
                              "workspace",
                              "platform",
                              "app"
                          ]
                        },
                        {
                          "key": "app_level",
                          "name": "App level",
                          "description": "Indicate the namespace keyword that contains your apps.",
                          "type": "String",
                          "defaultValue": "app"
                        }
                    ]
                  }
              ]
            }

            var recipeCreateNewWorkspace = {
              "name": "1) Prepare a defender deployment",
              "description": "Define a namespace hierarchy where the defender will be deployed.",
              "label": "recipe:create-workspace-platform-app",
              "deploymentMode": "Unrestricted",
              "metadata": [
                "@aporeto:author=aporeto"
              ],
              "associatedTags": [
                "aporeto:recipe:placement=getting-started"
              ],
              "targetIdentities": [
                "namespaces"
              ],
              "longDescription": "## Create a namespace hierarchy before registering your Defenders\n\n---\n\n### This wizard allows you to establish a repeatable structure to organize your workloads into apps\n* It creates a highly recommended fixed 3-tier Microsegmentation namespace hierarchy tree in your account namespace.\n> > /{account}/**{workspace}**/**{platform}**/**{app}**\n* All processing units (PU) will receive 3 tags corresponding to the 3 levels in the hierarchy you are about to create to aid in policy creation to simplify the consumption of the Microsegmentation solution.\n\n > > 1. @org:**workspace** =\n > > 1. @org:**platform** =\n > > 1. @org:**app** =\n\n* Hosts, Docker Hosts, and Container Clusters should each be in their own Platform groups.\n* Processing Units will appear in the user defined **\"app\"** tier after Defenders are registered.\n* **The default behavior for the app tiers will be to automatically enable Discovery Mode to allow all communication**\n* For K8s/OpenShift the app tier automatically corresponds the cluster namespace and requires no user input in this wizard\n\n---\n\n_**After running the wizard:**_\n\n> > - [ ] Note the namespace and provide it to the Defender registration\n> > - [ ] Navigate to the Microsegmentation app tier namespace to visualize your application connectivity\n> > - [ ] Start the policy creation process\n\n---\n\n_**Re-run this wizard to:**_\n> > - [ ] Add to an existing namespace hierarchy\n> > >  or\n> > - [ ] Create an entirely new namespace hierarchy\n\n\n#### For more information please refer to the documentation.",
              "template": "{{`\nAPIVersion: 1\nlabel: recipe:create-workspace-platform-app\ndata:\n  {{- $pattern := cat \"^\" .Aporeto.Namespace \"(/[a-zA-Z0-9-_]+){0,2}$\" | nospace }}\n  {{- if (regexMatch $pattern .Values.existing_namespace) }}\n  {{- $existing_ns := .Values.existing_namespace | trimPrefix .Aporeto.Namespace }}\n  {{- $workspace := \"\" }}\n  {{- $platform := \"\" }}\n  {{- $app := \"\" }}\n  namespaces:\n  {{- if (regexMatch \"^(/[a-zA-Z0-9-_]+){0,1}(/)?$\" .Values.existing_namespace) }}\n  {{- $workspace = required \"Workspace name is required\" .Values.workspace }}\n  {{- if not (regexMatch \"^[a-zA-Z0-9-_]+$\" $workspace) }}\n  {{- fail \"workspace name must only contain alpha numerical characters, '-' or '_'\"}}\n  {{- end }}\n  - name: {{ $workspace }}\n  {{- end }}\n  {{- if (regexMatch \"^(/[a-zA-Z0-9-_]+){0,2}(/)?$\" .Values.existing_namespace) }}\n  {{- $platform = required \"Platform name is required\" .Values.platform }}\n  {{- if not (regexMatch \"^[a-zA-Z0-9-_]+$\" $platform) }}\n  {{- fail \"platform name must only contain alpha numerical characters, '-' or '_'\"}}\n  {{- end }}\n  - name: {{ $platform }}\n    namespace: {{ regexReplaceAll \"\\\\s+\" (cat $existing_ns $workspace) \"/\" | trimSuffix \"/\"}}\n  {{- end }}\n  {{- if and (regexMatch \"^^(/[a-zA-Z0-9-_]+){0,3}(/)?$\" .Values.existing_namespace) (ne .Values.mode \"kubernetes\") }}\n  {{- $app = required \"Application name is required\" .Values.app}}\n  {{- if not (regexMatch \"^[a-zA-Z0-9-_]+$\" $app) }}\n  {{- fail \"application name must only contain alpha numerical characters, '-' or '_'\"}}\n  {{- end }}\n  - name: {{ $app }}\n    namespace: {{ regexReplaceAll \"\\\\s+\" (cat $existing_ns $workspace $platform) \"/\" | trimSuffix \"/\"}}\n  {{- end }}\n  {{- else }}\n  {{- fail \"Invalid starting namespace pattern\" }}\n  {{- end }}\n`}}",
              "steps": [
                {
                  "name": "Namespaces",
                  "parameters": [
                    {
                      "key": "existing_namespace",
                      "name": "Provide your account namespace or provide an existing namespace",
                      "description": "Leave the default (i.e. /{account} ) to create a new hierarchy or provide an existing namespace (e.g. /{account}/{workspace} ) to continue building on an existing hierarchy",
                      "type": "Namespace",
                      "defaultValue": namespace
                    },
                    {
                      "key": "starting_ns_warning",
                      "name": "Incorrect namespace",
                      "type": "WarningMessage",
                      "defaultValue": "The namespace provided is not valid",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "NotMatch",
                            "value": "^[a-zA-Z0-9-_/]+$"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "workspace",
                      "name": "Workspace name",
                      "description": "Examples are a Cloud Region (us-central-1), An Environment (dev, prod, test, pci), a business unit, or a combination",
                      "type": "String",
                      "optional": true,
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){0,1}$"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "mode",
                      "name": "Platform type",
                      "description": "Select the option that applies to your platform",
                      "type": "Enum",
                      "defaultValue": "hosts",
                      "allowedChoices": {
                        "hosts": "Hosts(Bare Metal, VMs)",
                        "docker": "Non-Orchestrated containers (Standalone Docker)",
                        "kubernetes": "Orchestrated containers (OpenShift, Kubernetes)"
                      },
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){0,2}$"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "platform",
                      "name": "Platform name",
                      "description": "Provide a name for your Kubernetes/Openshift Cluster, Host or DockerHost group name",
                      "type": "String",
                      "optional": true,
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){0,2}$"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "app",
                      "name": "Application name",
                      "description": "Provide a name for your app tier",
                      "type": "String",
                      "optional": true,
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){0,3}$"
                          },
                          {
                            "key": "mode",
                            "operator": "NotEqual",
                            "value": "kubernetes"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "kubernetes_warning",
                      "name": "Warning",
                      "type": "WarningMessage",
                      "defaultValue": "Selected namespace should be an account, workspace or platform level.",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){4,}$"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "sucess_message_nok8s1",
                      "name": "Details",
                      "type": "InfoMessage",
                      "defaultValue": "Copy the following namespace for your defender deployment: **.Values.existing_namespace/.Values.workspace/.Values.platform/.Values.app**",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){1}$"
                          },
                          {
                            "key": "mode",
                            "operator": "NotEqual",
                            "value": "kubernetes"
                          },
                          {
                            "key": "app",
                            "operator": "Defined"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "sucess_message_nok8s2",
                      "name": "Details",
                      "type": "InfoMessage",
                      "defaultValue": "Copy the following namespace for your defender deployment: **.Values.existing_namespace/.Values.platform/.Values.app**",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){2}$"
                          },
                          {
                            "key": "mode",
                            "operator": "NotEqual",
                            "value": "kubernetes"
                          },
                          {
                            "key": "app",
                            "operator": "Defined"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "sucess_message_nok8s3",
                      "name": "Details",
                      "type": "InfoMessage",
                      "defaultValue": "Copy the following namespace for your defender deployment: **.Values.existing_namespace/.Values.app**",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){3}$"
                          },
                          {
                            "key": "mode",
                            "operator": "NotEqual",
                            "value": "kubernetes"
                          },
                          {
                            "key": "app",
                            "operator": "Defined"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "sucess_message_k8s1",
                      "name": "Details",
                      "type": "InfoMessage",
                      "defaultValue": "Copy the following namespace for your defender deployment: **.Values.existing_namespace/.Values.workspace/.Values.platform**",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){1}$"
                          },
                          {
                            "key": "mode",
                            "operator": "Equal",
                            "value": "kubernetes"
                          },
                          {
                            "key": "platform",
                            "operator": "Defined"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "sucess_message_k8s2",
                      "name": "Details",
                      "type": "InfoMessage",
                      "defaultValue": "Copy the following namespace for your defender deployment: **.Values.existing_namespace/.Values.platform**",
                      "visibilityCondition": [
                        [
                          {
                            "key": "existing_namespace",
                            "operator": "Match",
                            "value": "^(/[a-zA-Z0-9-_]+){2}$"
                          },
                          {
                            "key": "mode",
                            "operator": "Equal",
                            "value": "kubernetes"
                          },
                          {
                            "key": "platform",
                            "operator": "Defined"
                          }
                        ]
                      ]
                    },
                    {
                      "key": "msgcopy",
                      "name": "I have copied my namespace",
                      "description": "I have copied my namespace.",
                      "type": "Checkbox",
                      "default": false,
                      "validationFunction": "function validate(value) {\n  if (value !== true) {\n    throw \"Please confirm you have copied your namespace\";\n  };\n}",
                      "visibilityCondition": [
                        [
                          {
                            "key": "mode",
                            "operator": "Equal",
                            "value": "kubernetes"
                          },
                          {
                            "key": "platform",
                            "operator": "Defined"
                          }
                        ],
                        [
                          {
                            "key": "mode",
                            "operator": "NotEqual",
                            "value": "kubernetes"
                          },
                          {
                            "key": "app",
                            "operator": "Defined"
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }

            var content = {
              data: {
                "APIVersion": 1,
                "label": "recipe:namespace-organizational-metadata",
                "data": {
                  "recipes": [recipeNamespaceOrganizationlMetadata, recipeCreateNewWorkspace]
                }
              }
            }

            // Import recipes
            api.Create('import', content, namespace);

            parameters = {
              "keys": ["workspace", "platform", "app"],
              "app_level": "app"
            }

            // Automatic deployment of the recipe
            return aporeto.deployRecipeWithLabelFilter(api, namespace, 'label == "recipe:namespace-organizational-metadata"', parameters);
          }

identities:
  - hookpolicy
  - automation
