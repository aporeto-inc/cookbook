APIVersion: 1
label: sync:subnets:aws
data:
  automations:
  - name: "Sync AWS Subnets"
    trigger: Time
    schedule: "0 * */1 * *"
    immediateExecution: true
    entitlements:
      externalnetwork:
        - retrieve-many
        - create
        - update
    actions:
      - |
        function then(api, params, payload) {

          var obj = aporeto.http('GET', 'https://ip-ranges.amazonaws.com/ip-ranges.json');
          var body = JSON.parse(obj.body);
          var subnets = body.prefixes;

          var services = [
            "AMAZON",
            "AMAZON_APPFLOW",
            "AMAZON_CONNECT",
            "API_GATEWAY",
            "CHIME_MEETINGS",
            "CHIME_VOICECONNECTOR",
            "CLOUD9",
            "CLOUDFRONT",
            "CLOUDFRONT_ORIGIN_FACING",
            "CODEBUILD",
            "DYNAMODB",
            "EBS",
            "EC2",
            "EC2_INSTANCE_CONNECT",
            "GLOBALACCELERATOR",
            "KINESIS_VIDEO_STREAMS",
            "ROUTE53",
            "ROUTE53_HEALTHCHECKS",
            "ROUTE53_HEALTHCHECKS_PUBLISHING",
            "ROUTE53_RESOLVER",
            "S3",
            "WORKSPACES_GATEWAYS"
          ];

          _.each(services, function(srv) {
            var extnets = api.RetrieveMany(
              'externalnetworks',
              null,
              'normalizedTags contains "externalnetwork:name=CSP Service AWS - ' + srv + ' Subnets"'
            );

            var entries = [];

            _.each(subnets, function(subnet) {
              if (subnet.service != srv) {
                return;
              }

              entries.push(subnet.ip_prefix);
            })

            entries = _.uniq(entries)

            if (extnets.length == 0) {
              api.Create('externalnetworks', {
                  "name": "CSP Service AWS - " + srv + " Subnets",
                  "propagate": true,
                  "entries": entries,
                  "associatedTags": ["cloud:aws:networks=imported", "cloud:aws:service=" + srv, "externalnetwork:name=CSP Service AWS - " + srv + " Subnets"]
              });

              return;
            }

            if (extnets.length > 1) {
              throw "found more than one external network matching " + srv
            }

            var extnet = extnets[0];

            if (_.isEqual(_.sortBy(entries), _.sortBy(extnet.entries))) {
              return;
            }

            extnet.entries = entries
            api.Update('externalnetwork', extnet)
            console.log('external network updated for ' + srv);
          })
        }
