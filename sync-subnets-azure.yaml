APIVersion: 1
label: sync:subnets:azure
data:
  automations:
  - name: Azure_Sync_Subnets
    trigger: Time
    schedule: "0 * */1 * *"
    immediateExecution: true
    entitlements:
      externalnetwork:
        - retrieve-many
        - create
        - update
    actions:
      - |
        function then(api, params, payload) {

          var page = aporeto.http('GET', 'https://www.microsoft.com/en-us/download/confirmation.aspx?id=56519');
          var jsonURL = page.body.match(/https:\/\/download.microsoft.com\/download\/.*?.json/)[0]

          var obj = aporeto.http('GET', jsonURL);
          var body = JSON.parse(obj.body);
          var values = body.values;
          var knownCIDRs = {};

          var services = _.groupBy(values, function(v) {
            return v.properties.systemService;
          })

          _.each(services, function(vals, srv) {
            if (!srv) {
              return;
            }

            srv = srv.replace(/ /g,"_")

            var ipPrefixes = {
              "IPv4": [],
              "IPv6": []
            };

            _.each(vals, function(val) {
              _.each(val.properties.addressPrefixes, function(addressPrefix) {
                if (addressPrefix in knownCIDRs) {
                  return;
                }
                knownCIDRs[addressPrefix] = 1

                if (_.contains(addressPrefix, ":")) {
                  ipPrefixes["IPv6"].push(addressPrefix);
                  return;
                }

                ipPrefixes["IPv4"].push(addressPrefix);
              })
            })

            _.map(ipPrefixes, function(entries, ipType) {
              if (entries.length == 0) {
                return;
              }

              entries = _.uniq(entries)

              var extnets = api.RetrieveMany(
                'externalnetworks',
                null,
                'normalizedTags contains "externalnetwork:name=Azure_' + srv + '_' + ipType + '"'
              );

              if (extnets.length == 0) {
                api.Create('externalnetworks', {
                    "name": "Azure_" + srv + "_" + ipType,
                    "propagate": true,
                    "entries": entries,
                    "associatedTags": ["cloud:azure=subnet", "cloud:azure=" + srv, "cloud:azure=" + ipType, "externalnetwork:name=Azure_" + srv + "_" + ipType]
                });

                return;
              }

              if (extnets.length > 1) {
                throw "found more than one external network matching " + srv + "_" + ipType
              }

              var extnet = extnets[0];

              if (_.isEqual(_.sortBy(entries), _.sortBy(extnet.entries))) {
                return;
              }

              extnet.entries = entries
              api.Update('externalnetwork', extnet)
              console.log('external network updated for ' + srv + '_' + ipType);
            })
          })
        }
