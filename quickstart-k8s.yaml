
APIVersion: 1
label: recipe:quickstart:k8s
data:
  recipes:
  - name: Secure a Kubernetes Cluster
    label: recipe:quickstart:k8s
    options:
      appCrendentialFormat: YAML
    propagate: true
    metadata:
    - "@aporeto:author=aporeto"
    associatedTags:
    - "aporeto:recipe:placement=getting-started"
    targetIdentities:
    - namespace
    - appcredential
    - enforcerprofile
    - enforcerprofilemappingpolicy
    - automation
    description: Secure a Kubernetes cluster with Microsegmentation enforcer and operator.
    longDescription: |-

      ### Secure your Kubernetes cluster with Microsegmentation

      Follow these steps to install the Microsegmentation operator and enforcer into your Kubernetes cluster.

      #### Prerequisites

      Before diving into the steps, make sure you have

      - [Created the tiller service account](https://docs.aporeto.com/docs/main/k8s-install/k8s-quickstart/#1-create-the-tiller-service-account)
      - [Initialized Helm and deployed tiller](https://docs.aporeto.com/docs/main/k8s-install/k8s-quickstart/#2-initialize-helm-and-deploy-tiller)
      - [Added the Microsegmentation helm repository](https://docs.aporeto.com/docs/main/k8s-install/k8s-quickstart/#3-add-the-aporeto-repository-to-helm)

      You can use steps 1-3 from the [official documentation page](https://docs.aporeto.com/saas/start/enforcer/k8s/) for that.

      #### Summary

      1. In the dialog here: define a namespace that will store all your data in a single folder-like structure.

        _(See all namespaces from the left menu under "Namespace Settings")_

      2. In the dialog here: choose your default trust model for Kubernetes namespaces - Kubernetes vs Zero Trust

      3. An enforcer profile with working defaults for a Kubernetes cluster will be created for you automatically.

      4. Two app credentials will be created for you automatically.
          - One will be given to the **enforcer** to register and communicate with the Microsegmentation Console.
          - One will be given to the **Microsegmentation operator** which provides a bridge between Microsegmentation and Kubernetes.

        _(See all "App Credentials" from the left menu under "Authentication Sources")_

      5. If you chose the Kubernetes trust model, an automation will be installed for you automatically.

        _(See all "Automations" from the left menu under "Integrations")_

      6. Install the Microsegmentation operator, CRDs and enforcer using helm (commands will be displayed in the summary at the end).

    template: |-
      {{`
      APIVersion: 1
      data:
        namespaces:
        - name: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
          {{- if .Values.namespace_description }}
          description: {{ .Values.namespace_description }}
          {{- end }}
        enforcerprofiles:
        - name: kubernetes-default
          namespace: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
          metadata:
          - '@profile:name=kubernetes-default'
          description: Default Profile for Kubernetes
          excludedNetworks:
          - 127.0.0.0/8
          ignoreExpression:
          - - '@app:k8s:namespace=aporeto'
          - - '@app:k8s:namespace=aporeto-operator'
          - - '@app:k8s:namespace=kube-system'
          excludedInterfaces: []
          targetNetworks: []
          targetUDPNetworks: []
        enforcerprofilemappingpolicies:
        - name: fallback-kubernetes-default
          namespace: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
          fallback: true
          description: "Kubernetes fallback: if there is no other profile, use the default Kubernetes profile."
          object:
          - - '@profile:name=kubernetes-default'
          subject:
          - - $identity=enforcer
        appcredentials:
        - name: "enforcer"
          namespace: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
          description: "Credentials used by the enforcer running in Kubernetes"
          roles:
          - "@auth:role=enforcer"
        - name: "aporeto-operator"
          namespace: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
          description: "Credentials used by the Microsegmentation operator"
          roles:
          - "@auth:role=aporeto-operator"
        {{- if (eq .Values.trust_model "kubernetes") }}
        automations:
          - name: install-default-allow-all-policies
            namespace: {{ required ".Values.namespace_name is required" .Values.namespace_name }}
            description: Installs default allow all fallback policies for every child namespace that gets created to mimic Kubernetes default behavior.
            trigger: Event
            events:
              namespace:
                - create
            entitlements:
              externalnetwork:
                - create
              networkaccesspolicy:
                - create
            condition: |-
              function when(api, params) {
                  return { continue: true, payload: { namespace: params.eventPayload.entity } };
              }
            actions:
              - |-
                function then(api, params, payload) {
                    api.Create('externalnetwork', {
                        name: 'external-tcp-all',
                        description: 'Created by an automation on namespace creation. It is safe to be deleted, if not required.',
                        metadata: ['@ext:name=tcpall'],
                        entries: ['0.0.0.0/0'],
                        servicePorts: ['tcp/1:65535'],
                        propagate: true,
                    }, payload.namespace.name);
                    api.Create('externalnetwork', {
                        name: 'external-udp-all',
                        description: 'Created by an automation on namespace creation. It is safe to be deleted, if not required.',
                        metadata: ['@ext:name=udpall'],
                        entries: ['0.0.0.0/0'],
                        servicePorts: ['udp/1:65535'],
                        propagate: true,
                    }, payload.namespace.name);
                    api.Create('networkaccesspolicy', {
                        name: 'default-fallback-ingress-allow-all',
                        description: 'Created by an automation on namespace creation. It is safe to be deleted, if not required.',
                        metadata: ['@netpol=default-fallback'],
                        propagate: true,
                        fallback: true,
                        logsEnabled: true,
                        observationEnabled: true,
                        observedTrafficAction: 'Apply',
                        action: 'Allow',
                        applyPolicyMode: 'IncomingTraffic',
                        subject: [
                            ['$identity=processingunit'],
                            ['@ext:name=tcpall'],
                            ['@ext:name=udpall'],
                        ],
                        object: [['$namespace='+payload.namespace.name]],
                    }, payload.namespace.name);
                    api.Create('networkaccesspolicy', {
                        name: 'default-fallback-egress-allow-all',
                        description: 'Created by an automation on namespace creation. It is safe to be deleted, if not required',
                        metadata: ['@netpol=default-fallback'],
                        propagate: true,
                        fallback: true,
                        logsEnabled: true,
                        observationEnabled: true,
                        observedTrafficAction: 'Apply',
                        action: 'Allow',
                        applyPolicyMode: 'OutgoingTraffic',
                        subject: [['$namespace='+payload.namespace.name]],
                        object: [
                            ['$identity=processingunit'],
                            ['@ext:name=tcpall'],
                            ['@ext:name=udpall'],
                        ],
                    }, payload.namespace.name);
                }
        {{- end }}
      `}}
    steps:

    - name: Namespace
      description: |-
        Let's create a namespace first. It will contain all the data that will be created during these steps.

        ##### Read more about Namespaces and Authentication

        - [Namespaces](https://docs.aporeto.com/saas/concepts/#namespaces)
        - [Authentications and authorizations](https://docs.aporeto.com/saas/concepts/#authentication)

      parameters:
      - key: namespace_name
        name: Namespace
        description: Define your namespace name.
        type: String
        defaultValue: mycluster

      - key: namespace_description
        name: Description
        description: Description of the namespace.
        type: String
        optional: true

    - name: Trust Model
      description: |-
        Choose your default trust model for synchronized Kubernetes namespaces. You can choose between two options here.

        #### Kubernetes

        Choosing the Kubernetes trust model means that unless you have created policies that match your processing units,
        your processing units are allowed everything by default.

        This will effectively install an automation into your Microsegmentation namespace which will create the required external networks
        and fallback network policies for every new Kubernetes namespace that gets synchronized with Microsegmentation.

        This is the _recommended_ way to get started with a cluster. It allows you to install all software with helm or through
        the OperatorHub in OpenShift and Microsegmentation will not get in the way. You can then go ahead and create the necessary policies
        for your namespace as you require. If you are ready for _Zero Trust_ simply remove (or disable) the fallback policies
        in the namespace. The fallback policies are not synchronized, so they will only appear for a new namespace.

        #### Zero Trust

        This is Microsegmentation's default operating model. Nothing is allowed unless explicitly allowed by policies. Choose this model
        if you are already confident about your policies or you are not afraid of denied flows.

        This will effectively skip to install the above mentioned automation.

      parameters:
      - key: trust_model
        name: Trust Model
        description: Choose your default trust model.
        type: Enum
        defaultValue: kubernetes
        allowedChoices:
          kubernetes: "Kubernetes"
          aporeto: "Zero Trust"

    successfullMessage: |-

        #### Create Kubernetes namespaces to deploy Microsegmentation

        ```shell
        kubectl create namespace aporeto-operator
        kubectl create namespace aporeto
        ```

        #### Install the secrets

        A zip file has been dowloaded to your computer. it contains application credentials
        that will be used to authenticate your cluster with Microsegmentation. Unzip the archive
        (for example by running _unzip credentials.zip_), then run:

        ```shell
        kubectl apply -n aporeto-operator -f aporeto-operator.yaml
        kubectl apply -n aporeto -f enforcerd.yaml
        ```

        #### Install CRDs, Microsegmentation operator and enforcer

        Install the Microsegmentation CRDs into your cluster:

        ```shell
        helm install aporeto/aporeto-crds --name aporeto-crds
        ```

        Install the Microsegmentation operator:

        ```shell
        helm install aporeto/aporeto-operator --name aporeto-operator --namespace aporeto-operator
        ```

        Install the enforcer:

        ```shell
        helm install aporeto/enforcerd --name enforcerd --namespace aporeto
        ```
