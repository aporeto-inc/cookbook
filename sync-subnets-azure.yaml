APIVersion: 1
label: recipe:sync:subnets:azure
data:
  recipes:
  - name: Synchronize Azure Public Subnets
    label: recipe:sync:subnets:azure
    propagate: true
    deploymentMode: Unique
    metadata:
    - "@aporeto:author=aporeto"
    targetIdentities:
    - automation
    - externalnetwork
    description: Regularly synchronizes Azure public subnets into External Networks.
    longDescription: |-
      ### Synchronize Azure public subnets

      This reads the Azure subnets of each service and adds them as entries
      to external networks in your namespace. It will create an external
      network for each service listed. You can use these external networks
      to create network policies based on the labels.

    template: |-
      {{`
      APIVersion: 1
      data:
        externalnetworks:
        {{- $renderID := .RenderID }}
        {{- $ipRangesURL := .Values.ipAddressRangesURL }}
        {{- range $_, $srv := .Values.services }}
        - name: "CSP Service Azure - {{ $srv }} Subnets"
          propagate: true
          entries:
          - "0.0.0.1/32"
          associatedTags:
          - 'recipe:renderid={{ $renderID }}'
          - 'cloud:azure:networks=imported'
          - 'cloud:azure:service={{ $srv }}'
        {{- end }}

        automations:
        - name: "Sync Azure Subnets"
          trigger: Time
          schedule: "0 * */1 * *"
          immediateExecution: true
          entitlements:
            externalnetwork:
              - retrieve-many
              - update
          actions:
            - |
              function then(api, params, payload) {

                var page = aporeto.http('GET', {{ $ipRangesURL | quote }});
                var jsonURL = page.body.match(/https:\/\/download.microsoft.com\/download\/.*?.json/)[0]

                var obj = aporeto.http('GET', jsonURL);
                var body = JSON.parse(obj.body);
                var vals = body.values;
                var extnets;
                {{- range $_, $srv := .Values.services }}

                extnets = api.RetrieveMany(
                  'externalnetworks',
                  null,
                  'normalizedTags contains "recipe:renderid={{ $renderID }}" and normalizedTags contains "cloud:azure:service={{ $srv }}"'
                );

                if (extnets.length == 1) {
                  var extnet = extnets[0];
                  var entries = [];

                  _.each(vals, function(val) {
                    if (val.properties.systemService != {{ $srv | quote }} && val.id != {{ $srv | quote }}) {
                      return;
                    }

                    entries = entries.concat(val.properties.addressPrefixes)
                  })

                  entries = _.uniq(entries)

                  if (!_.isEqual(_.sortBy(entries), _.sortBy(extnet.entries))) {
                    extnet.entries = entries
                    api.Update('externalnetwork', extnet)
                    console.log('external network updated for {{ $srv }}');
                  }
                }
                {{- end }}
              }
      `}}
    steps:
    - name: Synchronization
      description: Configure the Azure options
      parameters:
      - name: IP Address Ranges URL
        key: ipAddressRangesURL
        description: This is the URL to the IP address ranges.
        type: String
        defaultValue: "https://www.microsoft.com/en-us/download/confirmation.aspx?id=56519"

      - name: Services
        key: services
        description: The services to separate subnets into.
        type: StringSlice
        defaultValue:
        - "ActionGroup"
        - "ApplicationInsightsAvailability"
        - "AzureAD"
        - "AzureAPIForFHIR"
        - "AzureAdvancedThreatProtection"
        - "AzureApiManagement"
        - "AzureAppConfiguration"
        - "AzureAppService"
        - "AzureAppServiceManagement"
        - "AzureArcInfrastructure"
        - "AzureAttestation"
        - "AzureAutomation"
        - "AzureBackup"
        - "AzureBotService"
        - "AzureCognitiveSearch"
        - "AzureConnectors"
        - "AzureContainerRegistry"
        - "AzureCosmosDB"
        - "AzureDataExplorerManagement"
        - "AzureDataLake"
        - "AzureDatabricks"
        - "AzureDevOps"
        - "AzureDevSpaces"
        - "AzureDigitalTwins"
        - "AzureEventGrid"
        - "AzureEventHub"
        - "AzureFrontDoor"
        - "AzureIdentity"
        - "AzureInformationProtection"
        - "AzureIoTHub"
        - "AzureKeyVault"
        - "AzureMachineLearning"
        - "AzureMonitor"
        - "AzureOpenDatasets"
        - "AzurePortal"
        - "AzureResourceManager"
        - "AzureSQL"
        - "AzureSecurityCenter"
        - "AzureServiceBus"
        - "AzureSignalR"
        - "AzureSiteRecovery"
        - "AzureSphereSecureService_Prod"
        - "AzureStack"
        - "AzureStorage"
        - "AzureTrafficManager"
        - "AzureUpdateDelivery"
        - "AzureVideoAnalyzerForMedia"
        - "BatchNodeManagement"
        - "CognitiveServicesManagement"
        - "DataFactory"
        - "Dynamics365ForMarketingEmail"
        - "EOPExtPublished"
        - "GatewayManager"
        - "Grafana"
        - "HDInsight"
        - "LogicApps"
        - "M365ManagementActivityApi"
        - "M365ManagementActivityApiWebhook"
        - "MicrosoftAzureFluidRelay"
        - "MicrosoftCloudAppSecurity"
        - "MicrosoftContainerRegistry"
        - "OneDsCollector"
        - "PowerBI"
        - "PowerPlatformInfra"
        - "PowerQueryOnline"
        - "SCCservice"
        - "ServiceFabric"
        - "SqlManagement"
        - "StorageSyncService"
        - "WindowsAdminCenter"
        - "WindowsVirtualDesktop"
