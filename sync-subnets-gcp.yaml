APIVersion: 1
label: sync:subnets:gcp
data:
  automations:
  - name: GCP_Sync_Subnets
    trigger: Time
    schedule: "0 * */1 * *"
    immediateExecution: true
    entitlements:
      externalnetwork:
        - retrieve-many
        - create
        - update
    actions:
      - |
        function then(api, params, payload) {

          var obj = aporeto.http('GET', 'https://www.gstatic.com/ipranges/cloud.json');
          var body = JSON.parse(obj.body);
          var prefixes = body.prefixes;
          var knownCIDRs = {};

          var services = _.groupBy(prefixes, 'service')

          _.each(services, function(subnets, srv) {
            if (!srv) {
              return;
            }

            srv = srv.replace(/ /g,"_")

            var ipPrefixes = {
              "IPv4": [],
              "IPv6": []
            };

            _.each(subnets, function(subnet) {
              var keys = _.keys(subnet);

              if (_.contains(keys, "ipv4Prefix")) {
                if (subnet.ipv4Prefix in knownCIDRs) {
                  return;
                }
                knownCIDRs[subnet.ipv4Prefix] = 1

                ipPrefixes["IPv4"].push(subnet.ipv4Prefix);
                return;
              }

              if (_.contains(keys, "ipv6Prefix")) {
                if (subnet.ipv6Prefix in knownCIDRs) {
                  return;
                }
                knownCIDRs[subnet.ipv6Prefix] = 1

                ipPrefixes["IPv6"].push(subnet.ipv6Prefix);
              }
            })

            _.map(ipPrefixes, function(entries, ipType) {
              if (entries.length == 0) {
                return;
              }

              entries = _.uniq(entries)

              var extnets = api.RetrieveMany(
                'externalnetworks',
                null,
                'normalizedTags contains "externalnetwork:name=GCP_' + srv + '_' + ipType + '"'
              );

              if (extnets.length == 0) {
                api.Create('externalnetworks', {
                    "name": "GCP_" + srv + "_" + ipType,
                    "propagate": true,
                    "entries": entries,
                    "associatedTags": ["cloud:gcp=subnet", "cloud:gcp=" + srv, "cloud:gcp=" + ipType, "externalnetwork:name=GCP_" + srv + "_" + ipType]
                });

                return;
              }

              if (extnets.length > 1) {
                throw "found more than one external network matching " + srv + "_" + ipType
              }

              var extnet = extnets[0];

              if (_.isEqual(_.sortBy(entries), _.sortBy(extnet.entries))) {
                return;
              }

              extnet.entries = entries
              api.Update('externalnetwork', extnet)
              console.log('external network updated for ' + srv + '_' + ipType);
            })
          })
        }
