APIVersion: 1
label: recipe:sync:subnets:gcp
data:
  recipes:
  - name: Synchronize GCP Public Subnets
    label: recipe:sync:subnets:gcp
    propagate: true
    deploymentMode: Unique
    metadata:
    - "@aporeto:author=aporeto"
    targetIdentities:
    - automation
    - externalnetwork
    description: Regularly synchronizes GCP public subnets into External Networks.
    longDescription: |-
      ### Synchronize GCP public subnets

      This reads the GCP subnets of each service and adds them as entries
      to external networks in your namespace. It will create an external
      network for each service listed. You can use these external networks
      to create network policies based on the labels.

    template: |-
      {{`
      APIVersion: 1
      data:
        externalnetworks:
        {{- $renderID := .RenderID }}
        {{- $ipRangesURL := .Values.ipAddressRangesURL }}
        {{- $protos := .Values.protocols }}
        {{- $prts := .Values.ports }}
        {{- range $_, $srv := .Values.services }}
        - name: "CSP Service GCP - {{ $srv }} Subnets"
          propagate: true
          entries:
          - "0.0.0.1/32"
          servicePorts:
          {{- range $_, $protocol := $protos }}
          {{- range $_, $port := $prts }}
          - "{{ $protocol }}/{{ $port }}"
          {{- end }}
          {{- end }}
          associatedTags:
          - 'recipe:renderid={{ $renderID }}'
          - 'cloud:gcp:networks=imported'
          - 'cloud:gcp:service={{ $srv }}'
        {{- end }}

        automations:
        {{- range $_, $srv := .Values.services }}
        - name: "Sync GCP Subnets - {{ $srv }}"
          trigger: Time
          schedule: "0 * */1 * *"
          immediateExecution: true
          entitlements:
            externalnetwork:
              - retrieve-many
              - update
          actions:
            - |
              function then(api, params, payload) {

                var extnets = api.RetrieveMany(
                  'externalnetworks',
                  null,
                  'normalizedTags contains "recipe:renderid={{ $renderID }}" and normalizedTags contains "cloud:gcp:service={{ $srv }}"'
                );
                if (extnets.length != 1) {
                  throw "unable to find external network"
                }

                var obj = aporeto.http('GET', {{ $ipRangesURL | quote }});
                var body = JSON.parse(obj.body);
                var subnets = body.prefixes;
                var extnet = extnets[0];
                var entries = [];

                _.each(subnets, function(subnet) {
                  if (subnet.service != {{ $srv | quote }}) {
                    return;
                  }

                  var keys = _.keys(subnet);

                  if (_.contains(keys, "ipv4Prefix")) {
                    entries.push(subnet.ipv4Prefix);
                    return;
                  }

                  if (_.contains(keys, "ipv6Prefix")) {
                    entries.push(subnet.ipv6Prefix);
                    return;
                  }
                })

                entries = _.uniq(entries)

                if (_.isEqual(_.sortBy(entries), _.sortBy(extnet.entries))) {
                  console.log('no change since last sync');
                  return;
                }

                extnet.entries = entries
                api.Update('externalnetwork', extnet)
                console.log('external network updated');
              }
        {{- end }}
      `}}
    steps:
    - name: Synchronization
      description: Configure the GCP options
      parameters:
      - name: IP Address Ranges URL
        key: ipAddressRangesURL
        description: This is the URL to the IP address ranges.
        type: String
        defaultValue: "https://www.gstatic.com/ipranges/cloud.json"

      - name: Services
        key: services
        description: The services to separate subnets into.
        type: StringSlice
        defaultValue:
        - "Google Cloud"

      - name: Ports
        key: ports
        description: The ports to define in the external network. Empty means any.
        type: StringSlice
        optional: true

      - name: Protocols
        key: protocols
        description: The protocols to define in the external network. Empty means any.
        type: StringSlice
        optional: true
