APIVersion: 1
label: sync:subnets:azure
data:
  automations:
  - name: "Sync Azure Subnets"
    trigger: Time
    schedule: "0 * */1 * *"
    immediateExecution: true
    entitlements:
      externalnetwork:
        - retrieve-many
        - create
        - update
    actions:
      - |
        function then(api, params, payload) {

          var page = aporeto.http('GET', 'https://www.microsoft.com/en-us/download/confirmation.aspx?id=56519');
          var jsonURL = page.body.match(/https:\/\/download.microsoft.com\/download\/.*?.json/)[0]

          var obj = aporeto.http('GET', jsonURL);
          var body = JSON.parse(obj.body);
          var vals = body.values;

          var services = [
            "ActionGroup",
            "ApplicationInsightsAvailability",
            "AzureAD",
            "AzureAPIForFHIR",
            "AzureAdvancedThreatProtection",
            "AzureApiManagement",
            "AzureAppConfiguration",
            "AzureAppService",
            "AzureAppServiceManagement",
            "AzureArcInfrastructure",
            "AzureAttestation",
            "AzureAutomation",
            "AzureBackup",
            "AzureBotService",
            "AzureCognitiveSearch",
            "AzureConnectors",
            "AzureContainerRegistry",
            "AzureCosmosDB",
            "AzureDataExplorerManagement",
            "AzureDataLake",
            "AzureDatabricks",
            "AzureDevOps",
            "AzureDevSpaces",
            "AzureDigitalTwins",
            "AzureEventGrid",
            "AzureEventHub",
            "AzureFrontDoor",
            "AzureIdentity",
            "AzureInformationProtection",
            "AzureIoTHub",
            "AzureKeyVault",
            "AzureMachineLearning",
            "AzureMonitor",
            "AzureOpenDatasets",
            "AzurePortal",
            "AzureResourceManager",
            "AzureSQL",
            "AzureSecurityCenter",
            "AzureServiceBus",
            "AzureSignalR",
            "AzureSiteRecovery",
            "AzureSphereSecureService_Prod",
            "AzureStack",
            "AzureStorage",
            "AzureTrafficManager",
            "AzureUpdateDelivery",
            "AzureVideoAnalyzerForMedia",
            "BatchNodeManagement",
            "CognitiveServicesManagement",
            "DataFactory",
            "Dynamics365ForMarketingEmail",
            "EOPExtPublished",
            "GatewayManager",
            "Grafana",
            "HDInsight",
            "LogicApps",
            "M365ManagementActivityApi",
            "M365ManagementActivityApiWebhook",
            "MicrosoftAzureFluidRelay",
            "MicrosoftCloudAppSecurity",
            "MicrosoftContainerRegistry",
            "OneDsCollector",
            "PowerBI",
            "PowerPlatformInfra",
            "PowerQueryOnline",
            "SCCservice",
            "ServiceFabric",
            "SqlManagement",
            "StorageSyncService",
            "WindowsAdminCenter",
            "WindowsVirtualDesktop"
          ];

          _.each(services, function(srv) {
            var extnets = api.RetrieveMany(
              'externalnetworks',
              null,
              'normalizedTags contains "externalnetwork:name=CSP Service Azure - ' + srv + ' Subnets"'
            );

            var entries = [];

            _.each(vals, function(val) {
              if (val.properties.systemService != srv && val.id != srv) {
                return;
              }

              entries = entries.concat(val.properties.addressPrefixes)
            })

            entries = _.uniq(entries)

            if (extnets.length == 0) {
              api.Create('externalnetworks', {
                  "name": "CSP Service Azure - " + srv + " Subnets",
                  "propagate": true,
                  "entries": entries,
                  "associatedTags": ["cloud:azure:networks=imported", "cloud:azure:service=" + srv, "externalnetwork:name=CSP Service Azure - " + srv + " Subnets"]
              });

              return;
            }

            if (extnets.length > 1) {
              throw "found more than one external network matching " + srv
            }

            var extnet = extnets[0];

            if (_.isEqual(_.sortBy(entries), _.sortBy(extnet.entries))) {
              return;
            }

            extnet.entries = entries
            api.Update('externalnetwork', extnet)
            console.log('external network updated for ' + srv);
          })
        }
